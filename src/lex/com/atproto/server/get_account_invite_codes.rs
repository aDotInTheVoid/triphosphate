// Code generated by triphosphate lexgen. DO NOT EDIT.

#[allow(unused_imports)]
use super::super::super::super::_lex;
pub struct Params {
    #[serde(rename = "createAvailable")]
    pub create_available: Option<bool>,
    #[serde(rename = "includeUsed")]
    pub include_used: Option<bool>,
}
impl _lex::_rt::AsParams for Params {
    fn as_params(&self) -> Vec<(&'static str, String)> {
        let mut r: Vec<(&'static str, String)> = Vec::with_capacity(0usize);
        if let Some(create_available) = &self.create_available {
            r.push(("createAvailable", create_available.to_string()));
        }
        if let Some(include_used) = &self.include_used {
            r.push(("includeUsed", include_used.to_string()));
        }
        r
    }
}

#[derive(::std::fmt::Debug, ::std::clone::Clone, ::serde::Deserialize, ::serde::Serialize)]
pub struct Responce {
    pub codes: Vec<_lex::com::atproto::server::defs::InviteCode>,
}
