// Code generated by triphosphate lexgen. DO NOT EDIT.

#[allow(unused_imports)]
use super::super::super::super::_lex;
///Misleading identity, affiliation, or content
#[derive(::std::clone::Clone, ::serde::Deserialize, ::serde::Serialize)]
pub struct ReasonMisleading;
impl _lex::_rt::LexItem for ReasonMisleading {
    const URI: &'static str = "com.atproto.moderation.defs#reasonMisleading";
}

///Other: reports not falling under another report category
#[derive(::std::clone::Clone, ::serde::Deserialize, ::serde::Serialize)]
pub struct ReasonOther;
impl _lex::_rt::LexItem for ReasonOther {
    const URI: &'static str = "com.atproto.moderation.defs#reasonOther";
}

///Rude, harassing, explicit, or otherwise unwelcoming behavior
#[derive(::std::clone::Clone, ::serde::Deserialize, ::serde::Serialize)]
pub struct ReasonRude;
impl _lex::_rt::LexItem for ReasonRude {
    const URI: &'static str = "com.atproto.moderation.defs#reasonRude";
}

///Unwanted or mislabeled sexual content
#[derive(::std::clone::Clone, ::serde::Deserialize, ::serde::Serialize)]
pub struct ReasonSexual;
impl _lex::_rt::LexItem for ReasonSexual {
    const URI: &'static str = "com.atproto.moderation.defs#reasonSexual";
}

///Spam: frequent unwanted promotion, replies, mentions
#[derive(::std::clone::Clone, ::serde::Deserialize, ::serde::Serialize)]
pub struct ReasonSpam;
impl _lex::_rt::LexItem for ReasonSpam {
    const URI: &'static str = "com.atproto.moderation.defs#reasonSpam";
}

pub type ReasonType = ::std::string::String;
impl _lex::_rt::LexItem for ReasonType {
    const URI: &'static str = "com.atproto.moderation.defs#reasonType";
}

///Direct violation of server rules, laws, terms of service
#[derive(::std::clone::Clone, ::serde::Deserialize, ::serde::Serialize)]
pub struct ReasonViolation;
impl _lex::_rt::LexItem for ReasonViolation {
    const URI: &'static str = "com.atproto.moderation.defs#reasonViolation";
}
