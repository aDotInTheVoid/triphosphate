// Code generated by triphosphate lexgen. DO NOT EDIT.

#[allow(unused_imports)]
use super::super::super::super::_lex;
pub struct Params {
    ///The DID of the repo.
    pub did: _lex::_rt::Did,
    ///The earliest commit to start from
    pub earliest: Option<_lex::_rt::Cid>,
    ///The most recent commit
    pub latest: Option<_lex::_rt::Cid>,
}
impl _lex::_rt::AsParams for Params {
    fn as_params(&self) -> Vec<(&'static str, String)> {
        let mut r: Vec<(&'static str, String)> = Vec::with_capacity(1usize);
        {
            let did = &self.did;
            r.push(("did", _lex::_rt::StringFormat::as_str(did).to_owned()));
        }
        if let Some(earliest) = &self.earliest {
            r.push((
                "earliest",
                _lex::_rt::StringFormat::as_str(earliest).to_owned(),
            ));
        }
        if let Some(latest) = &self.latest {
            r.push(("latest", _lex::_rt::StringFormat::as_str(latest).to_owned()));
        }
        r
    }
}

#[derive(::std::fmt::Debug, ::std::clone::Clone, ::serde::Deserialize, ::serde::Serialize)]
pub struct Responce {
    pub commits: Vec<_lex::_rt::Cid>,
}
