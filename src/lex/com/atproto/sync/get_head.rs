// Code generated by triphosphate lexgen. DO NOT EDIT.

#[allow(unused_imports)]
use super::super::super::super::_lex;
pub struct Params {
    ///The DID of the repo.
    pub did: _lex::_rt::Did,
}
impl _lex::_rt::AsParams for Params {
    fn as_params(&self) -> Vec<(&'static str, String)> {
        let mut r: Vec<(&'static str, String)> = Vec::with_capacity(1usize);
        {
            let did = &self.did;
            r.push(("did", _lex::_rt::StringFormat::as_str(did).to_owned()));
        }
        r
    }
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct Responce {
    pub root: _lex::_rt::Cid,
}
