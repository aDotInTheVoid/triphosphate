// Code generated by triphosphate lexgen. DO NOT EDIT.

#[allow(unused_imports)]
use super::super::super::super::_lex;
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct AdultContentPref {
    pub enabled: bool,
}
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct ContentLabelPref {
    pub label: ::std::string::String,
    pub visibility: ::std::string::String,
}
pub type Preferences = ::std::vec::Vec<()>;
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct ProfileView {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar: Option<::std::string::String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<::std::string::String>,
    pub did: _lex::_rt::Did,
    #[serde(rename = "displayName")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<::std::string::String>,
    pub handle: _lex::_rt::Handle,
    #[serde(rename = "indexedAt")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub indexed_at: Option<_lex::_rt::Datetime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<()>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub viewer: Option<_lex::app::bsky::actor::defs::ViewerState>,
}
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct ProfileViewBasic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar: Option<::std::string::String>,
    pub did: _lex::_rt::Did,
    #[serde(rename = "displayName")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<::std::string::String>,
    pub handle: _lex::_rt::Handle,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<()>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub viewer: Option<_lex::app::bsky::actor::defs::ViewerState>,
}
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct ProfileViewDetailed {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar: Option<::std::string::String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub banner: Option<::std::string::String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<::std::string::String>,
    pub did: _lex::_rt::Did,
    #[serde(rename = "displayName")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display_name: Option<::std::string::String>,
    #[serde(rename = "followersCount")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers_count: Option<i64>,
    #[serde(rename = "followsCount")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub follows_count: Option<i64>,
    pub handle: _lex::_rt::Handle,
    #[serde(rename = "indexedAt")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub indexed_at: Option<_lex::_rt::Datetime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<()>,
    #[serde(rename = "postsCount")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub posts_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub viewer: Option<_lex::app::bsky::actor::defs::ViewerState>,
}
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct SavedFeedsPref {
    pub pinned: (),
    pub saved: (),
}
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct ViewerState {
    #[serde(rename = "blockedBy")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocked_by: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blocking: Option<_lex::_rt::AtUri>,
    #[serde(rename = "followedBy")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followed_by: Option<_lex::_rt::AtUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following: Option<_lex::_rt::AtUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub muted: Option<bool>,
    #[serde(rename = "mutedByList")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub muted_by_list: Option<_lex::app::bsky::graph::defs::ListViewBasic>,
}
