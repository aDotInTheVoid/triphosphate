// Code generated by triphosphate lexgen. DO NOT EDIT.

#[allow(unused_imports)]
use super::super::super::super::_lex;
#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct AdultContentPref {
    pub enabled: bool,
}
impl _lex::_rt::LexItem for AdultContentPref {
    const URI: &'static str = "app.bsky.actor.defs#adultContentPref";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct ContentLabelPref {
    pub label: ::std::string::String,
    pub visibility: ::std::string::String,
}
impl _lex::_rt::LexItem for ContentLabelPref {
    const URI: &'static str = "app.bsky.actor.defs#contentLabelPref";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct FeedViewPref {
    ///The URI of the feed, or an identifier which describes the feed.
    pub feed: ::std::string::String,
    #[serde(rename = "hideQuotePosts")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    ///Hide quote posts in the feed.
    pub hide_quote_posts: Option<bool>,
    #[serde(rename = "hideReplies")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    ///Hide replies in the feed.
    pub hide_replies: Option<bool>,
    #[serde(rename = "hideRepliesByLikeCount")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    ///Hide replies in the feed if they do not have this number of likes.
    pub hide_replies_by_like_count: Option<i64>,
    #[serde(rename = "hideRepliesByUnfollowed")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    ///Hide replies in the feed if they are not by followed users.
    pub hide_replies_by_unfollowed: Option<bool>,
    #[serde(rename = "hideReposts")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    ///Hide reposts in the feed.
    pub hide_reposts: Option<bool>,
}
impl _lex::_rt::LexItem for FeedViewPref {
    const URI: &'static str = "app.bsky.actor.defs#feedViewPref";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct PersonalDetailsPref {
    #[serde(rename = "birthDate")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    ///The birth date of the owner of the account.
    pub birth_date: Option<_lex::_rt::Datetime>,
}
impl _lex::_rt::LexItem for PersonalDetailsPref {
    const URI: &'static str = "app.bsky.actor.defs#personalDetailsPref";
}

pub type Preferences = Vec<()>;

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct ProfileView {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub avatar: Option<::std::string::String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub description: Option<::std::string::String>,
    pub did: _lex::_rt::Did,
    #[serde(rename = "displayName")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub display_name: Option<::std::string::String>,
    pub handle: _lex::_rt::Handle,
    #[serde(rename = "indexedAt")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub indexed_at: Option<_lex::_rt::Datetime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub labels: Option<Vec<_lex::com::atproto::label::defs::Label>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub viewer: Option<_lex::app::bsky::actor::defs::ViewerState>,
}
impl _lex::_rt::LexItem for ProfileView {
    const URI: &'static str = "app.bsky.actor.defs#profileView";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct ProfileViewBasic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub avatar: Option<::std::string::String>,
    pub did: _lex::_rt::Did,
    #[serde(rename = "displayName")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub display_name: Option<::std::string::String>,
    pub handle: _lex::_rt::Handle,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub labels: Option<Vec<_lex::com::atproto::label::defs::Label>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub viewer: Option<_lex::app::bsky::actor::defs::ViewerState>,
}
impl _lex::_rt::LexItem for ProfileViewBasic {
    const URI: &'static str = "app.bsky.actor.defs#profileViewBasic";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct ProfileViewDetailed {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub avatar: Option<::std::string::String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub banner: Option<::std::string::String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub description: Option<::std::string::String>,
    pub did: _lex::_rt::Did,
    #[serde(rename = "displayName")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub display_name: Option<::std::string::String>,
    #[serde(rename = "followersCount")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub followers_count: Option<i64>,
    #[serde(rename = "followsCount")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub follows_count: Option<i64>,
    pub handle: _lex::_rt::Handle,
    #[serde(rename = "indexedAt")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub indexed_at: Option<_lex::_rt::Datetime>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub labels: Option<Vec<_lex::com::atproto::label::defs::Label>>,
    #[serde(rename = "postsCount")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub posts_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub viewer: Option<_lex::app::bsky::actor::defs::ViewerState>,
}
impl _lex::_rt::LexItem for ProfileViewDetailed {
    const URI: &'static str = "app.bsky.actor.defs#profileViewDetailed";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct SavedFeedsPref {
    pub pinned: Vec<_lex::_rt::AtUri>,
    pub saved: Vec<_lex::_rt::AtUri>,
}
impl _lex::_rt::LexItem for SavedFeedsPref {
    const URI: &'static str = "app.bsky.actor.defs#savedFeedsPref";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct ThreadViewPref {
    #[serde(rename = "prioritizeFollowedUsers")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    ///Show followed users at the top of all replies.
    pub prioritize_followed_users: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    ///Sorting mode.
    pub sort: Option<::std::string::String>,
}
impl _lex::_rt::LexItem for ThreadViewPref {
    const URI: &'static str = "app.bsky.actor.defs#threadViewPref";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::std::cmp::PartialEq,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct ViewerState {
    #[serde(rename = "blockedBy")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub blocked_by: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub blocking: Option<_lex::_rt::AtUri>,
    #[serde(rename = "followedBy")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub followed_by: Option<_lex::_rt::AtUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub following: Option<_lex::_rt::AtUri>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub muted: Option<bool>,
    #[serde(rename = "mutedByList")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[ipld(default = None)]
    pub muted_by_list: Option<_lex::app::bsky::graph::defs::ListViewBasic>,
}
impl _lex::_rt::LexItem for ViewerState {
    const URI: &'static str = "app.bsky.actor.defs#viewerState";
}
