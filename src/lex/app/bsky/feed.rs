// Code generated by triphosphate lexgen. DO NOT EDIT.
pub mod defs;
pub mod post;

#[allow(unused_imports)]
use super::super::super::_lex;
#[derive(::std::fmt::Debug, ::std::clone::Clone, ::serde::Deserialize, ::serde::Serialize)]
pub struct Post {
    #[serde(rename = "createdAt")]
    pub created_at: _lex::_rt::Datetime,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub embed: Option<()>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    ///Deprecated: replaced by app.bsky.richtext.facet.
    pub entities: Option<Vec<_lex::app::bsky::feed::post::Entity>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub facets: Option<Vec<_lex::app::bsky::richtext::Facet>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<()>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub langs: Option<Vec<_lex::_rt::Language>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reply: Option<_lex::app::bsky::feed::post::ReplyRef>,
    pub text: ::std::string::String,
}
impl _lex::_rt::LexRecord for Post {
    const NSID: _lex::_rt::Nsid = _lex::_rt::Nsid::__new_unchecked("app.bsky.feed.post", 13usize);
}
impl _lex::_rt::LexItem for Post {
    const URI: &'static str = "app.bsky.feed.post";
}
