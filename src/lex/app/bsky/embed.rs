// Code generated by triphosphate lexgen. DO NOT EDIT.
pub mod external;
pub mod images;
pub mod record;
pub mod record_with_media;

#[allow(unused_imports)]
use super::super::super::_lex;
#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct External {
    pub external: _lex::app::bsky::embed::external::External,
}
impl _lex::_rt::LexItem for External {
    const URI: &'static str = "app.bsky.embed.external";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct Images {
    pub images: Vec<_lex::app::bsky::embed::images::Image>,
}
impl _lex::_rt::LexItem for Images {
    const URI: &'static str = "app.bsky.embed.images";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct Record {
    pub record: _lex::com::atproto::repo::StrongRef,
}
impl _lex::_rt::LexItem for Record {
    const URI: &'static str = "app.bsky.embed.record";
}

#[derive(
    ::std::fmt::Debug,
    ::std::clone::Clone,
    ::serde::Deserialize,
    ::serde::Serialize,
    ::libipld::DagCbor,
)]
pub struct RecordWithMedia {
    pub media: (),
    pub record: _lex::app::bsky::embed::Record,
}
impl _lex::_rt::LexItem for RecordWithMedia {
    const URI: &'static str = "app.bsky.embed.recordWithMedia";
}
