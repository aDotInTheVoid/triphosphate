// Code generated by triphosphate lexgen. DO NOT EDIT.

#[allow(unused_imports)]
use super::super::super::super::_lex;
pub struct Params {
    #[serde(rename = "seenAt")]
    pub seen_at: Option<_lex::_rt::Datetime>,
}
impl _lex::_rt::AsParams for Params {
    fn as_params(&self) -> Vec<(&'static str, String)> {
        let mut r: Vec<(&'static str, String)> = Vec::with_capacity(0usize);
        if let Some(seen_at) = &self.seen_at {
            r.push((
                "seenAt",
                _lex::_rt::StringFormat::as_str(seen_at).to_owned(),
            ));
        }
        r
    }
}

#[derive(::std::fmt::Debug, ::std::clone::Clone, ::serde::Deserialize, ::serde::Serialize)]
pub struct Responce {
    pub count: i64,
}
