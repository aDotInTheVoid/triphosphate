// Code generated by triphosphate lexgen. DO NOT EDIT.

#[allow(unused_imports)]
use super::super::super::super::_lex;
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct ListItemView {
    pub subject: _lex::app::bsky::actor::defs::ProfileView,
}
pub type ListPurpose = ::std::string::String;
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct ListView {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar: Option<::std::string::String>,
    pub cid: _lex::_rt::Cid,
    pub creator: _lex::app::bsky::actor::defs::ProfileView,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<::std::string::String>,
    #[serde(rename = "descriptionFacets")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description_facets: Option<()>,
    #[serde(rename = "indexedAt")]
    pub indexed_at: _lex::_rt::Datetime,
    pub name: ::std::string::String,
    pub purpose: _lex::app::bsky::graph::defs::ListPurpose,
    pub uri: _lex::_rt::AtUri,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub viewer: Option<_lex::app::bsky::graph::defs::ListViewerState>,
}
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct ListViewBasic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar: Option<::std::string::String>,
    pub cid: _lex::_rt::Cid,
    #[serde(rename = "indexedAt")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub indexed_at: Option<_lex::_rt::Datetime>,
    pub name: ::std::string::String,
    pub purpose: _lex::app::bsky::graph::defs::ListPurpose,
    pub uri: _lex::_rt::AtUri,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub viewer: Option<_lex::app::bsky::graph::defs::ListViewerState>,
}
#[derive(:: serde :: Deserialize, :: serde :: Serialize)]
pub struct ListViewerState {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub muted: Option<bool>,
}
#[doc = "A list of actors to apply an aggregate moderation action (mute/block) on"]
pub struct Modlist;
